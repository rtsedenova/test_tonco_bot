import { Context } from "telegraf";
import { getPoolAddressByNFT } from "../services/getPoolInfo";
import { getTrackedNFTs, addTrackedNFTToS3 } from "../services/s3Service";
import { getUserTelegramId } from "../services/getUserTelegramId";  

const SCALE_FACTOR = Math.pow(2, 96);

export async function trackNFT(ctx: Context) {
    try {
        if (!ctx.message || !("text" in ctx.message)) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
            return;
        }

        const text = ctx.message.text;
        const [command, nftAddress] = text.split(" ");

        const poolInfo = await getPoolAddressByNFT(nftAddress);
        if (!poolInfo) {
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ NFT.");
            return;
        }

        const { owner, tickLower, tickUpper, priceSqrt } = poolInfo;
        const priceSqrtBigInt = BigInt(priceSqrt);
        const normalizedPriceSqrt = Number(priceSqrtBigInt) / SCALE_FACTOR;
        const priceLower = Math.pow(1.0001, tickLower) * 1000;
        const priceUpper = Math.pow(1.0001, tickUpper) * 1000;

        const telegramId = getUserTelegramId(ctx);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —ç—Ç–æ—Ç NFT
        const trackedNFTs = await getTrackedNFTs();
        const user = trackedNFTs.find((item: any) => item.telegram_id === telegramId);
        if (user) {
            const existingNFT = user.nfts.find((nft: any) => nft.nftAddress === nftAddress);
            if (existingNFT) {
                await ctx.reply(
                    `NFT —Å –∞–¥—Ä–µ—Å–æ–º <b>${nftAddress}</b> —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.`,
                    { parse_mode: "HTML" }
                );
                return;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ S3
        await addTrackedNFTToS3({
            owner_id: owner,
            telegram_id: telegramId,
            nft: {
                nftAddress,
                priceRange: { lower: priceLower, upper: priceUpper },
            },
        });

        await ctx.reply(
            `NFT —Å –∞–¥—Ä–µ—Å–æ–º <b>${nftAddress}</b> —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ü´°.\n\n` +
            `–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: <b>${priceLower.toFixed(2)}</b> - <b>${priceUpper.toFixed(2)}</b>`,
            { parse_mode: "HTML" }
        );
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ trackNFT:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}