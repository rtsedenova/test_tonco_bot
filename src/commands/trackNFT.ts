import { Context } from "telegraf";
import { getPoolAddressByNFT } from "../services/poolService";
import fs from "fs";
import path from "path";

const SCALE_FACTOR = Math.pow(2, 96);
const TRACKED_NFTS_FILE = path.resolve("src/data/trackedNFTs.json");

interface NFT {
    nftAddress: string;
    priceRange: { lower: number; upper: number };
}

function loadTrackedNFTs(): NFT[] {
    try {
        if (fs.existsSync(TRACKED_NFTS_FILE)) {
            const data = fs.readFileSync(TRACKED_NFTS_FILE, "utf-8");
            return JSON.parse(data);
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö NFT:", error);
    }
    return [];
}

function saveTrackedNFTs(trackedNFTs: NFT[]) {
    try {
        fs.writeFileSync(TRACKED_NFTS_FILE, JSON.stringify(trackedNFTs, null, 2));
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö NFT:", error);
    }
}

export async function trackNFT(ctx: Context) {
    try {
        if (!ctx.message || !("text" in ctx.message)) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
            return;
        }

        const text = ctx.message.text;
        const [command, nftAddress] = text.split(" ");

        if (command !== "/track") {
            await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track <–∞–¥—Ä–µ—Å NFT>.");
            return;
        }

        if (!nftAddress) {
            await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å NFT –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /track.");
            return;
        }

        const trackedNFTs = loadTrackedNFTs();  

        const existingNFT = trackedNFTs.find(nft => nft.nftAddress === nftAddress);
        if (existingNFT) {
            await ctx.reply(`‚ùó NFT —Å –∞–¥—Ä–µ—Å–æ–º <b>${nftAddress}</b> —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.`, { parse_mode: "HTML" });
            return;
        }

        const poolInfo = await getPoolAddressByNFT(nftAddress);
        if (!poolInfo) {
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ NFT.");
            return;
        }

        const { tickLower, tickUpper, priceSqrt } = poolInfo;
        const priceSqrtBigInt = BigInt(priceSqrt);
        const normalizedPriceSqrt = Number(priceSqrtBigInt) / SCALE_FACTOR;
        const price = normalizedPriceSqrt ** 2 * 1000;

        const priceLower = Math.pow(1.0001, tickLower) * 1000;
        const priceUpper = Math.pow(1.0001, tickUpper) * 1000;

        trackedNFTs.push({
            nftAddress,
            priceRange: { lower: priceLower, upper: priceUpper },
        });

        saveTrackedNFTs(trackedNFTs);

        trackedNFTs.length = 0;

        await ctx.reply(
            `NFT —Å –∞–¥—Ä–µ—Å–æ–º <b>${nftAddress}</b> —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ü´°.\n\n` +
            `–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: <b>${priceLower.toFixed(2)}</b> - <b>${priceUpper.toFixed(2)}</b>`,
            { parse_mode: "HTML" }
        );
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ trackNFT:", error);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}
