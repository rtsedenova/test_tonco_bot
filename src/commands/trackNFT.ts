import { Context } from "telegraf";
import { getPoolAddressByNFT } from "../services/getPoolInfo";
import { getTrackedNFTs, addTrackedNFTToS3 } from "../services/s3Service";
import { getUserTelegramId } from "../services/getUserTgId";
import { tickToPrice } from "../utils/tickToPrice";
import { UserData, NFT } from "../types"

export async function trackNFT(ctx: Context) {
  try {
    if (!ctx.message || !("text" in ctx.message)) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
      return;
    }

    const text = ctx.message.text;
    const [_, nftAddress] = text.split(" ");

    const poolInfo = await getPoolAddressByNFT(nftAddress);
    if (!poolInfo) {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ NFT.");
      return;
    }

    const { owner, tickLower, tickUpper, priceSqrt } = poolInfo;

    const priceLower = tickToPrice(tickLower);
    const priceUpper = tickToPrice(tickUpper);

    const telegramId = getUserTelegramId(ctx);
    console.log("User Telegram ID:", telegramId);

    const trackedNFTs = await getTrackedNFTs();

    const user = trackedNFTs.find((item: UserData) => item.telegram_id === telegramId);
    if (user) {
      const existingNFT = user.nfts.find((nft: NFT) => nft.nftAddress === nftAddress);
      if (existingNFT) {
        await ctx.reply(
          `NFT —Å –∞–¥—Ä–µ—Å–æ–º <b>${nftAddress}</b> —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.`,
          { parse_mode: "HTML" }
        );
        return;
      }
    }

    await addTrackedNFTToS3({
      owner_id: owner,
      telegram_id: telegramId,
      nft: {
        nftAddress,
        priceRange: { lower: priceLower, upper: priceUpper },
      },
    });

    await ctx.reply(
      `NFT —Å –∞–¥—Ä–µ—Å–æ–º <b>${nftAddress}</b> —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ü´°.\n\n` +
      `–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: <b>${priceLower.toFixed(2)}</b> - <b>${priceUpper.toFixed(2)}</b>`,
      { parse_mode: "HTML" }
    );
  } catch (error) {
    console.error("Error in trackNFT:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
}